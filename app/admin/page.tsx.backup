"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Edit, Save, X, Plus, Trash2, ArrowLeft, LogOut, QrCode } from "lucide-react";
import { treesData as initialTreesData, farmActivities as initialActivities } from "@/data/trees";
import { TreeInfo, FarmActivity } from "@/types/tree";
import Link from "next/link";
import { QRCodeSVG } from "qrcode.react";

export default function AdminDashboard() {
  const router = useRouter();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const [trees, setTrees] = useState<TreeInfo[]>(initialTreesData);
  const [activities, setActivities] = useState<FarmActivity[]>(initialActivities);
  const [editingTree, setEditingTree] = useState<string | null>(null);
  const [editForm, setEditForm] = useState<TreeInfo | null>(null);
  const [activeTab, setActiveTab] = useState<"trees" | "table" | "activities" | "qrcodes">("trees");
  const [showingQR, setShowingQR] = useState<string | null>(null);

  // Check authentication
  useEffect(() => {
    const loggedIn = localStorage.getItem("adminLoggedIn");
    if (loggedIn === "true") {
      setIsAuthenticated(true);
    } else {
      router.push("/admin/login");
    }
    setLoading(false);
  }, [router]);

  const handleLogout = () => {
    localStorage.removeItem("adminLoggedIn");
    localStorage.removeItem("adminUser");
    router.push("/admin/login");
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">🌿</div>
          <p className="text-xl text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return null;
  }

  const handleEdit = (tree: TreeInfo) => {
    setEditingTree(tree.id);
    setEditForm({ ...tree });
  };

  const handleSave = () => {
    if (editForm) {
      setTrees(trees.map((t) => (t.id === editForm.id ? editForm : t)));
      setEditingTree(null);
      setEditForm(null);
      alert("Tree information updated successfully!");
    }
  };

  const handleCancel = () => {
    setEditingTree(null);
    setEditForm(null);
  };

  const handleChange = (field: keyof TreeInfo, value: string) => {
    if (editForm) {
      setEditForm({ ...editForm, [field]: value });
    }
  };

  const handleDeleteActivity = (id: string) => {
    if (confirm("Are you sure you want to delete this activity?")) {
      setActivities(activities.filter((a) => a.id !== id));
      alert("Activity deleted successfully!");
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-gradient-to-r from-tropical-green to-tropical-lime text-white shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold">Admin Dashboard</h1>
              <p className="text-gray-100 mt-1">Manage tree information and farm activities</p>
            </div>
            <div className="flex items-center space-x-4">
              <Link
                href="/"
                className="flex items-center space-x-2 bg-white/20 hover:bg-white/30 px-4 py-2 rounded-lg transition-colors"
              >
                <ArrowLeft size={20} />
                <span>Back to Website</span>
              </Link>
              <button
                onClick={handleLogout}
                className="flex items-center space-x-2 bg-red-500/80 hover:bg-red-600 px-4 py-2 rounded-lg transition-colors"
              >
                <LogOut size={20} />
                <span>Logout</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Quick Actions */}
        <div className="mb-8 bg-gradient-to-r from-purple-50 to-pink-50 border-2 border-purple-200 rounded-xl p-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4">🚀 Quick Actions</h2>
          <div className="flex flex-wrap gap-4">
            <Link
              href="/admin/bulk-import"
              className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold px-6 py-3 rounded-lg flex items-center space-x-2 transition-colors shadow-lg"
            >
              <Plus size={20} />
              <span>Bulk Import Trees (500+)</span>
            </Link>
            <Link
              href="/farm-transparency"
              className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-semibold px-6 py-3 rounded-lg transition-colors shadow-lg"
            >
              View Farm Map
            </Link>
          </div>
        </div>

        {/* Tabs */}
        <div className="flex space-x-4 mb-8 overflow-x-auto">
          <button
            onClick={() => setActiveTab("trees")}
            className={`px-6 py-3 rounded-lg font-semibold transition-all whitespace-nowrap ${
              activeTab === "trees"
                ? "bg-gradient-to-r from-tropical-green to-tropical-lime text-white shadow-lg"
                : "bg-white text-gray-700 hover:bg-gray-50 shadow-md"
            }`}
          >
            Tree Management
          </button>
          <button
            onClick={() => setActiveTab("table")}
            className={`px-6 py-3 rounded-lg font-semibold transition-all whitespace-nowrap ${
              activeTab === "table"
                ? "bg-gradient-to-r from-tropical-green to-tropical-lime text-white shadow-lg"
                : "bg-white text-gray-700 hover:bg-gray-50 shadow-md"
            }`}
          >
            Data Table
          </button>
          <button
            onClick={() => setActiveTab("qrcodes")}
            className={`px-6 py-3 rounded-lg font-semibold transition-all whitespace-nowrap ${
              activeTab === "qrcodes"
                ? "bg-gradient-to-r from-tropical-green to-tropical-lime text-white shadow-lg"
                : "bg-white text-gray-700 hover:bg-gray-50 shadow-md"
            }`}
          >
            QR Codes
          </button>
          <button
            onClick={() => setActiveTab("activities")}
            className={`px-6 py-3 rounded-lg font-semibold transition-all whitespace-nowrap ${
              activeTab === "activities"
                ? "bg-gradient-to-r from-tropical-green to-tropical-lime text-white shadow-lg"
                : "bg-white text-gray-700 hover:bg-gray-50 shadow-md"
            }`}
          >
            Farm Activities
          </button>
        </div>

        {/* Tree Management Tab */}
        {activeTab === "trees" && (
          <div className="space-y-6">
            {trees.map((tree) => (
              <div key={tree.id} className="bg-white rounded-xl shadow-lg p-6">
                {editingTree === tree.id && editForm ? (
                  // Edit Mode
                  <div className="space-y-4">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-2xl font-bold text-gray-900">
                        Edit Tree Information
                      </h3>
                      <div className="flex space-x-2">
                        <button
                          onClick={handleSave}
                          className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
                        >
                          <Save size={20} />
                          <span>Save</span>
                        </button>
                        <button
                          onClick={handleCancel}
                          className="flex items-center space-x-2 bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors"
                        >
                          <X size={20} />
                          <span>Cancel</span>
                        </button>
                      </div>
                    </div>

                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Variety
                        </label>
                        <input
                          type="text"
                          value={editForm.variety}
                          onChange={(e) => handleChange("variety", e.target.value)}
                          className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-tropical-lime focus:outline-none"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Tree Age (years)
                        </label>
                        <input
                          type="number"
                          value={editForm.treeAge}
                          onChange={(e) => handleChange("treeAge", e.target.value)}
                          className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-tropical-lime focus:outline-none"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Location
                        </label>
                        <input
                          type="text"
                          value={editForm.location}
                          onChange={(e) => handleChange("location", e.target.value)}
                          className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-tropical-lime focus:outline-none"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Health Status
                        </label>
                        <select
                          value={editForm.health}
                          onChange={(e) => handleChange("health", e.target.value)}
                          className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-tropical-lime focus:outline-none"
                        >
                          <option value="Excellent">Excellent</option>
                          <option value="Good">Good</option>
                          <option value="Fair">Fair</option>
                          <option value="Needs Attention">Needs Attention</option>
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Last Fertilized
                        </label>
                        <input
                          type="date"
                          value={editForm.lastFertilized}
                          onChange={(e) => handleChange("lastFertilized", e.target.value)}
                          className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-tropical-lime focus:outline-none"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Fertilizer Type
                        </label>
                        <input
                          type="text"
                          value={editForm.fertilizerType}
                          onChange={(e) => handleChange("fertilizerType", e.target.value)}
                          className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-tropical-lime focus:outline-none"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Last Harvest
                        </label>
                        <input
                          type="date"
                          value={editForm.lastHarvest}
                          onChange={(e) => handleChange("lastHarvest", e.target.value)}
                          className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-tropical-lime focus:outline-none"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Next Expected Harvest
                        </label>
                        <input
                          type="date"
                          value={editForm.nextExpectedHarvest}
                          onChange={(e) =>
                            handleChange("nextExpectedHarvest", e.target.value)
                          }
                          className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-tropical-lime focus:outline-none"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Annual Yield
                        </label>
                        <input
                          type="text"
                          value={editForm.yield}
                          onChange={(e) => handleChange("yield", e.target.value)}
                          className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-tropical-lime focus:outline-none"
                        />
                      </div>

                      <div className="md:col-span-2">
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Notes
                        </label>
                        <textarea
                          value={editForm.notes}
                          onChange={(e) => handleChange("notes", e.target.value)}
                          rows={3}
                          className="w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:border-tropical-lime focus:outline-none resize-none"
                        />
                      </div>
                    </div>
                  </div>
                ) : (
                  // View Mode
                  <div>
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <h3 className="text-2xl font-bold text-gray-900">
                          {tree.variety}
                        </h3>
                        <p className="text-gray-600">ID: {tree.id}</p>
                      </div>
                      <button
                        onClick={() => handleEdit(tree)}
                        className="flex items-center space-x-2 bg-tropical-lime hover:bg-tropical-green text-white px-4 py-2 rounded-lg transition-colors"
                      >
                        <Edit size={20} />
                        <span>Edit</span>
                      </button>
                    </div>

                    <div className="grid md:grid-cols-3 gap-4 text-sm">
                      <div>
                        <span className="font-semibold text-gray-700">Age:</span>{" "}
                        {tree.treeAge} years
                      </div>
                      <div>
                        <span className="font-semibold text-gray-700">Location:</span>{" "}
                        {tree.location}
                      </div>
                      <div>
                        <span className="font-semibold text-gray-700">Health:</span>{" "}
                        {tree.health}
                      </div>
                      <div>
                        <span className="font-semibold text-gray-700">Last Fertilized:</span>{" "}
                        {tree.lastFertilized}
                      </div>
                      <div>
                        <span className="font-semibold text-gray-700">Fertilizer:</span>{" "}
                        {tree.fertilizerType}
                      </div>
                      <div>
                        <span className="font-semibold text-gray-700">Yield:</span>{" "}
                        {tree.yield}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}

        {/* Data Table Tab */}
        {activeTab === "table" && (
          <div className="space-y-6">
            {/* Annual Measurements Table */}
            <div className="bg-white rounded-xl shadow-lg overflow-hidden">
              <div className="p-6 bg-gradient-to-r from-green-50 to-emerald-50 border-b-2 border-green-200">
                <h3 className="text-xl font-bold text-gray-900 mb-2">📏 Ukuran Tahunan Pokok (Annual Tree Measurements)</h3>
                <p className="text-gray-700 text-sm">Update setahun sekali - Saiz kanopi dan ukur lilit</p>
              </div>

            <div className="overflow-x-auto">
              <table className="w-full text-xs" style={{ fontSize: '0.7rem' }}>
                <thead className="bg-tropical-green text-white sticky top-0">
                  <tr>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20" style={{ minWidth: '40px' }}>Bil</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20" style={{ minWidth: '90px' }}>No</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20" style={{ minWidth: '80px' }}>Zone</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20" style={{ minWidth: '60px' }}>Bilau</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20" style={{ minWidth: '120px' }}>Variety</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20 bg-green-700" style={{ minWidth: '100px' }}>Tarikh Baru</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20 bg-green-700" style={{ minWidth: '80px' }}>Kanopi Baru (m)</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20 bg-green-700" style={{ minWidth: '80px' }}>Lilit Baru (cm)</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20 bg-green-600" style={{ minWidth: '100px' }}>Tarikh Lama</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20 bg-green-600" style={{ minWidth: '80px' }}>Kanopi Lama (m)</th>
                    <th className="px-2 py-2 text-left font-semibold bg-green-600" style={{ minWidth: '80px' }}>Lilit Lama (mm)</th>
                  </tr>
                </thead>
                <tbody>
                  {trees.map((tree, index) => (
                    <tr
                      key={tree.id}
                      className="border-b border-gray-200 hover:bg-green-50 transition-colors"
                    >
                      <td className="px-2 py-2 border-r border-gray-200 font-semibold">{tree.bil || index + 1}</td>
                      <td className="px-2 py-2 border-r border-gray-200">{tree.no || tree.id}</td>
                      <td className="px-2 py-2 border-r border-gray-200">{tree.zone || "-"}</td>
                      <td className="px-2 py-2 border-r border-gray-200">{tree.row || "-"}</td>
                      <td className="px-2 py-2 border-r border-gray-200 font-medium">{tree.variety}</td>
                      <td className="px-2 py-2 border-r border-gray-200 bg-green-50">
                        <input
                          type="date"
                          value={tree.tarikhBaru || ""}
                          onChange={(e) => {
                            const updated = trees.map(t =>
                              t.id === tree.id ? { ...t, tarikhBaru: e.target.value } : t
                            );
                            setTrees(updated);
                          }}
                          className="w-full px-1 py-1 border border-gray-300 rounded focus:border-tropical-lime focus:outline-none" style={{ fontSize: '0.7rem' }}
                        />
                      </td>
                      <td className="px-2 py-2 border-r border-gray-200 bg-green-50">
                        <input
                          type="text"
                          value={tree.saizKanopiBaru || ""}
                          onChange={(e) => {
                            const updated = trees.map(t =>
                              t.id === tree.id ? { ...t, saizKanopiBaru: e.target.value } : t
                            );
                            setTrees(updated);
                          }}
                          placeholder="0.0"
                          className="w-full px-1 py-1 border border-gray-300 rounded focus:border-tropical-lime focus:outline-none" style={{ fontSize: '0.7rem' }}
                        />
                      </td>
                      <td className="px-2 py-2 border-r border-gray-200 bg-green-50">
                        <input
                          type="text"
                          value={tree.saizUkurLilitBaru || ""}
                          onChange={(e) => {
                            const updated = trees.map(t =>
                              t.id === tree.id ? { ...t, saizUkurLilitBaru: e.target.value } : t
                            );
                            setTrees(updated);
                          }}
                          placeholder="0.0"
                          className="w-full px-1 py-1 border border-gray-300 rounded focus:border-tropical-lime focus:outline-none" style={{ fontSize: '0.7rem' }}
                        />
                      </td>
                      <td className="px-2 py-2 border-r border-gray-200 bg-yellow-50">
                        <input
                          type="date"
                          value={tree.tarikhLama || ""}
                          onChange={(e) => {
                            const updated = trees.map(t =>
                              t.id === tree.id ? { ...t, tarikhLama: e.target.value } : t
                            );
                            setTrees(updated);
                          }}
                          className="w-full px-1 py-1 border border-gray-300 rounded focus:border-tropical-lime focus:outline-none" style={{ fontSize: '0.7rem' }}
                        />
                      </td>
                      <td className="px-2 py-2 border-r border-gray-200 bg-yellow-50">
                        <input
                          type="text"
                          value={tree.saizKanopiLama || ""}
                          onChange={(e) => {
                            const updated = trees.map(t =>
                              t.id === tree.id ? { ...t, saizKanopiLama: e.target.value } : t
                            );
                            setTrees(updated);
                          }}
                          placeholder="0.0"
                          className="w-full px-1 py-1 border border-gray-300 rounded focus:border-tropical-lime focus:outline-none" style={{ fontSize: '0.7rem' }}
                        />
                      </td>
                      <td className="px-2 py-2 bg-yellow-50">
                        <input
                          type="text"
                          value={tree.saizUkurLilitLama || ""}
                          onChange={(e) => {
                            const updated = trees.map(t =>
                              t.id === tree.id ? { ...t, saizUkurLilitLama: e.target.value } : t
                            );
                            setTrees(updated);
                          }}
                          placeholder="0.0"
                          className="w-full px-1 py-1 border border-gray-300 rounded focus:border-tropical-lime focus:outline-none" style={{ fontSize: '0.7rem' }}
                        />
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div className="p-4 bg-gray-50 border-t border-gray-200 flex justify-end">
              <button
                onClick={() => {
                  alert("Data saved successfully! In production, this would save to database.");
                }}
                className="bg-gradient-to-r from-tropical-green to-tropical-lime hover:from-tropical-lime hover:to-tropical-green text-white font-semibold px-6 py-2 rounded-lg transition-colors flex items-center space-x-2"
              >
                <Save size={20} />
                <span>Save Ukuran Tahunan</span>
              </button>
            </div>
          </div>

          {/* Weekly Maintenance Table */}
          <div className="bg-white rounded-xl shadow-lg overflow-hidden">
            <div className="p-6 bg-gradient-to-r from-blue-50 to-orange-50 border-b-2 border-blue-200">
              <h3 className="text-xl font-bold text-gray-900 mb-2">🌱 Rawatan Mingguan (Weekly Maintenance)</h3>
              <p className="text-gray-700 text-sm">Update setiap minggu - Baja dan racun</p>
            </div>

            <div className="overflow-x-auto">
              <table className="w-full text-xs" style={{ fontSize: '0.7rem' }}>
                <thead className="bg-gradient-to-r from-blue-600 to-orange-600 text-white sticky top-0">
                  <tr>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20" style={{ minWidth: '40px' }}>Bil</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20" style={{ minWidth: '90px' }}>No</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20" style={{ minWidth: '120px' }}>Variety</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20" style={{ minWidth: '80px' }}>Zone</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20 bg-blue-700" style={{ minWidth: '100px' }}>Tarikh Baja</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20 bg-blue-700" style={{ minWidth: '150px' }}>Jenis Baja</th>
                    <th className="px-2 py-2 text-left font-semibold border-r border-white/20 bg-orange-700" style={{ minWidth: '100px' }}>Tarikh Racun</th>
                    <th className="px-2 py-2 text-left font-semibold bg-orange-700" style={{ minWidth: '150px' }}>Jenis Racun</th>
                  </tr>
                </thead>
                <tbody>
                  {trees.map((tree, index) => (
                    <tr
                      key={tree.id}
                      className="border-b border-gray-200 hover:bg-blue-50 transition-colors"
                    >
                      <td className="px-2 py-2 border-r border-gray-200 font-semibold">{tree.bil || index + 1}</td>
                      <td className="px-2 py-2 border-r border-gray-200">{tree.no || tree.id}</td>
                      <td className="px-2 py-2 border-r border-gray-200 font-medium">{tree.variety}</td>
                      <td className="px-2 py-2 border-r border-gray-200">{tree.zone || "-"}</td>
                      <td className="px-2 py-2 border-r border-gray-200 bg-blue-50">
                        <input
                          type="date"
                          value={tree.tarikhBaja || ""}
                          onChange={(e) => {
                            const updated = trees.map(t =>
                              t.id === tree.id ? { ...t, tarikhBaja: e.target.value } : t
                            );
                            setTrees(updated);
                          }}
                          className="w-full px-1 py-1 border border-gray-300 rounded focus:border-blue-500 focus:outline-none" style={{ fontSize: '0.7rem' }}
                        />
                      </td>
                      <td className="px-2 py-2 border-r border-gray-200 bg-blue-50">
                        <input
                          type="text"
                          value={tree.jenisBaja || ""}
                          onChange={(e) => {
                            const updated = trees.map(t =>
                              t.id === tree.id ? { ...t, jenisBaja: e.target.value } : t
                            );
                            setTrees(updated);
                          }}
                          placeholder="NPK 15-15-15, Organic..."
                          className="w-full px-1 py-1 border border-gray-300 rounded focus:border-blue-500 focus:outline-none" style={{ fontSize: '0.7rem' }}
                        />
                      </td>
                      <td className="px-2 py-2 border-r border-gray-200 bg-orange-50">
                        <input
                          type="date"
                          value={tree.tarikhRacun || ""}
                          onChange={(e) => {
                            const updated = trees.map(t =>
                              t.id === tree.id ? { ...t, tarikhRacun: e.target.value } : t
                            );
                            setTrees(updated);
                          }}
                          className="w-full px-1 py-1 border border-gray-300 rounded focus:border-orange-500 focus:outline-none" style={{ fontSize: '0.7rem' }}
                        />
                      </td>
                      <td className="px-2 py-2 bg-orange-50">
                        <input
                          type="text"
                          value={tree.jenisRacun || ""}
                          onChange={(e) => {
                            const updated = trees.map(t =>
                              t.id === tree.id ? { ...t, jenisRacun: e.target.value } : t
                            );
                            setTrees(updated);
                          }}
                          placeholder="Insecticide, Fungicide..."
                          className="w-full px-1 py-1 border border-gray-300 rounded focus:border-orange-500 focus:outline-none" style={{ fontSize: '0.7rem' }}
                        />
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div className="p-4 bg-gray-50 border-t border-gray-200 flex justify-end">
              <button
                onClick={() => {
                  alert("Data saved successfully! In production, this would save to database.");
                }}
                className="bg-gradient-to-r from-blue-600 to-orange-600 hover:from-blue-700 hover:to-orange-700 text-white font-semibold px-6 py-2 rounded-lg transition-colors flex items-center space-x-2"
              >
                <Save size={20} />
                <span>Save Rawatan Mingguan</span>
              </button>
            </div>
          </div>
        )}

        {/* QR Codes Tab */}
        {activeTab === "qrcodes" && (
          <div className="space-y-6">
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 border-2 border-blue-200 rounded-xl p-6 mb-6">
              <h3 className="text-xl font-bold text-gray-900 mb-2">📱 QR Code Tree Update System</h3>
              <p className="text-gray-700">
                Print these QR codes and attach them to trees. Scan with your phone to quickly update tree conditions from the field.
              </p>
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {trees.map((tree) => {
                const updateUrl = `${typeof window !== 'undefined' ? window.location.origin : ''}/admin/tree-update?id=${tree.id}`;

                return (
                  <div key={tree.id} className="bg-white rounded-xl shadow-lg p-6">
                    <div className="text-center">
                      <h4 className="text-lg font-bold text-gray-900 mb-2">{tree.variety}</h4>
                      <p className="text-sm text-gray-600 mb-4">ID: {tree.id}</p>

                      {/* QR Code */}
                      <div className="flex justify-center mb-4 p-4 bg-white border-4 border-gray-200 rounded-lg">
                        <QRCodeSVG
                          value={updateUrl}
                          size={200}
                          level="H"
                          includeMargin={true}
                        />
                      </div>

                      <div className="text-xs text-gray-600 mb-4">
                        <p>Zone: {tree.zone || "N/A"}</p>
                        <p>Row: {tree.row || "N/A"}</p>
                        <p>Location: {tree.location}</p>
                      </div>

                      {/* Print Button */}
                      <button
                        onClick={() => {
                          const printWindow = window.open('', '_blank');
                          if (printWindow) {
                            printWindow.document.write(`
                              <html>
                                <head>
                                  <title>Print QR Code - ${tree.variety}</title>
                                  <style>
                                    body {
                                      font-family: Arial, sans-serif;
                                      text-align: center;
                                      padding: 20px;
                                    }
                                    h1 { font-size: 24px; margin-bottom: 10px; }
                                    p { margin: 5px 0; color: #666; }
                                    .qr-container {
                                      margin: 20px auto;
                                      padding: 20px;
                                      border: 4px solid #000;
                                      display: inline-block;
                                    }
                                  </style>
                                </head>
                                <body>
                                  <h1>${tree.variety}</h1>
                                  <p><strong>Tree ID:</strong> ${tree.id}</p>
                                  <p><strong>Zone:</strong> ${tree.zone || "N/A"} | <strong>Row:</strong> ${tree.row || "N/A"}</p>
                                  <p><strong>Location:</strong> ${tree.location}</p>
                                  <div class="qr-container">
                                    ${document.querySelector(`#qr-${tree.id}`)?.innerHTML || ''}
                                  </div>
                                  <p style="margin-top: 20px;">Scan to update tree condition</p>
                                </body>
                              </html>
                            `);
                            printWindow.document.close();
                            setTimeout(() => {
                              printWindow.print();
                            }, 250);
                          }
                        }}
                        className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold px-4 py-2 rounded-lg transition-colors flex items-center justify-center space-x-2"
                      >
                        <QrCode size={18} />
                        <span>Print QR Code</span>
                      </button>

                      {/* Hidden div for printing */}
                      <div id={`qr-${tree.id}`} style={{ display: 'none' }}>
                        <QRCodeSVG
                          value={updateUrl}
                          size={300}
                          level="H"
                          includeMargin={true}
                        />
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* Farm Activities Tab */}
        {activeTab === "activities" && (
          <div className="space-y-4">
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-bold text-gray-900">Farm Activities</h3>
                <button className="flex items-center space-x-2 bg-tropical-lime hover:bg-tropical-green text-white px-4 py-2 rounded-lg transition-colors">
                  <Plus size={20} />
                  <span>Add Activity</span>
                </button>
              </div>

              <div className="space-y-3">
                {activities.map((activity) => (
                  <div
                    key={activity.id}
                    className="flex items-start justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                  >
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-1">
                        <h4 className="font-bold text-gray-900">
                          {activity.activity}
                        </h4>
                        <span className="text-sm text-gray-500">
                          {activity.date}
                        </span>
                      </div>
                      <p className="text-gray-600 text-sm mb-1">
                        {activity.description}
                      </p>
                      <p className="text-xs text-gray-500">
                        By: {activity.performedBy}
                      </p>
                    </div>
                    <button
                      onClick={() => handleDeleteActivity(activity.id)}
                      className="ml-4 p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                    >
                      <Trash2 size={20} />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
